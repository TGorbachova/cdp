package com.epam.tour;


import java.lang.reflect.*;
import java.lang.annotation.Annotation;
import java.util.ArrayList;

public class Runner {
	
	//Need to create collection with those types 
	ArrayList<String> tours = new ArrayList<String>();
	ArrayList<Health> health = new ArrayList<Health>();
	ArrayList<Excursion> excursion = new ArrayList<Excursion>();
	ArrayList<Rest> rest = new ArrayList<Rest>();
	ArrayList<Shopping> shopping = new ArrayList<Shopping>();
	ArrayList<Cruise> cruise = new ArrayList<Cruise>();
		
	public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, SecurityException{
		//Task 1
		
		//Task 2
		
		//Task 3
		TravelTour travelTour = new com.epam.tour.TravelTour();
		Class<? extends TravelTour> someClass  = travelTour.getClass();
		
		//Get fields TravelTour class using Reflection API
		getFields(someClass);
		
		//Get methods TravelTour class using Reflection API
		getMethods(someClass); 
		
		//Invoke method TravelTour class using Reflection API
		//Method method = someClass.getClass().getMethod("methodName", null);
		//System.out.println(method);
		//method.invoke(method, null);	
		try {
		    
		    Object t = someClass.newInstance();

		    Method[] allMethods = someClass.getDeclaredMethods();
		    for (Method m : allMethods) {
			String mname = m.getName();
			if (!mname.startsWith("test")
			    || (m.getGenericReturnType() != boolean.class)) {
			    continue;
			}
	 		Type[] pType = m.getGenericParameterTypes();
	 		if ((pType.length != 1)
			    || Locale.class.isAssignableFrom(pType[0].getClass())) {
	 		    continue;
	 		}

			out.format("invoking %s()%n", mname);
			try {
			    m.setAccessible(true);
			    Object o = m.invoke(t, new Locale(args[1], args[2], args[3]));
			    out.format("%s() returned %b%n", mname, (Boolean) o);

			// Handle any exceptions thrown by method to be invoked.
			} catch (InvocationTargetException x) {
			    Throwable cause = x.getCause();
			    err.format("invocation of %s failed: %s%n",
				       mname, cause.getMessage());
			}
		    }

	        // production code should handle these exceptions more gracefully
		} catch (ClassNotFoundException x) {
		    x.printStackTrace();
		} catch (InstantiationException x) {
		    x.printStackTrace();
		} catch (IllegalAccessException x) {
		    x.printStackTrace();
		}
	    }
	}

	private static void getMethods(Class<? extends TravelTour> someClass) {
		System.out.println("\nMethods for " + someClass + ":");
		Method[] methods = someClass.getDeclaredMethods();
				
		for (Method meth : methods) {
		   Annotation[] annotations = meth.getAnnotations();
		   Class<?> returType = meth.getReturnType();
		   System.out.print("\t");
		   for (Annotation a : annotations)
		       System.out.print("@" + a.annotationType().getSimpleName() + " ");
		       		 
		       System.out.print("\t" + meth.getModifiers() + "\t" + returType.getName() + " " + meth.getName() + "(");
		       System.out.print(meth.getParameterTypes());
		       System.out.println(") { }");
		}
	}

	private static void getFields(Class<? extends TravelTour> someClass) {
		System.out.println("Fields for " + someClass + ":");
		Field[] fields = someClass.getDeclaredFields();
		for (Field field : fields) {
			Class<?> fieldType = field.getType();
			System.out.println("Òèï: " + fieldType.getName() + "\t Èìÿ: " + field.getName());
		}
	}

}
